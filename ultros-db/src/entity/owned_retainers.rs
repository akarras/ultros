//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "owned_retainers")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub retainer_id: i32,
    pub discord_id: i64,
    pub character_id: Option<i32>,
    pub weight: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::final_fantasy_character::Entity",
        from = "Column::CharacterId",
        to = "super::final_fantasy_character::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    FinalFantasyCharacter,
    #[sea_orm(
        belongs_to = "super::discord_user::Entity",
        from = "Column::DiscordId",
        to = "super::discord_user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    DiscordUser,
    #[sea_orm(
        belongs_to = "super::retainer::Entity",
        from = "Column::RetainerId",
        to = "super::retainer::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Retainer,
}

impl Related<super::final_fantasy_character::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FinalFantasyCharacter.def()
    }
}

impl Related<super::discord_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DiscordUser.def()
    }
}

impl Related<super::retainer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Retainer.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
