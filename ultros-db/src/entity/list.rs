//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "list")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub owner: i64,
    pub name: String,
    pub world_id: Option<i32>,
    pub datacenter_id: Option<i32>,
    pub region_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::alert_price::Entity")]
    AlertPrice,
    #[sea_orm(
        belongs_to = "super::datacenter::Entity",
        from = "Column::DatacenterId",
        to = "super::datacenter::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Datacenter,
    #[sea_orm(has_many = "super::list_item::Entity")]
    ListItem,
    #[sea_orm(
        belongs_to = "super::region::Entity",
        from = "Column::RegionId",
        to = "super::region::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Region,
    #[sea_orm(
        belongs_to = "super::world::Entity",
        from = "Column::WorldId",
        to = "super::world::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    World,
}

impl Related<super::alert_price::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AlertPrice.def()
    }
}

impl Related<super::datacenter::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Datacenter.def()
    }
}

impl Related<super::list_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ListItem.def()
    }
}

impl Related<super::region::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Region.def()
    }
}

impl Related<super::world::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::World.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
